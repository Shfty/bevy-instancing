TODO: Uniform support for instance buffer
      * Need to split instances into
        (std::mem::size_of::<InstanceData>() / MAX_UNIFORM_BUFFER_SIZE) sub-batches,
        introduce additional draw calls

TODO: Optimization pass for instanced mesh batcher

TODO: Use BufferVec to cache batch data inside InstanceMeta
      * Avoid clearing every draw
        * Instead, prune empty buffers
      * Should be able to avoid unnecessary writes on frames where the
        buffer data for a given key doesn't change
        * Seems important, since the act of writing data to the GPU is what indirect avoids

TODO: Specialization for compute shaders that operate on a MeshInstanceBlock
      * Effectively a generalization of the current board compute module
      * Should resemble SpecializedInstancedMaterial
      * InstanceComputeKernel?
      * SpecializedComputePipeline is worth investigating; may be able to leverage

TODO: Implement StandardInstancedMaterial
      * Initial goal: Make pbr.wgsl work with instances
        * Should be able to encode most StandardMaterial params as instance data
      * Secondary goal: Make shadows work

NOTES: Transparency ordering
      * Currently, transparency ordering is only correct versus other instances with the
        same mesh within the same batch
        * This is down to sorting each batch into contiguous blocks of a given mesh,
          then sorting the instances in those blocks by depth
      * It's fundamentally more performant due to scaling by O(mesh_count) calls,
        but also fundamentally incorrect w.r.t. transparency ordering
      * Correctness requires that depth supercedes mesh for sorting purposes
        * Batches could be sorted by depth, and then a series of indirect draw calls
          could be generated for each contiguous block of a given mesh
      * However, is this worth it given that transparency ordering cannot take place across different batches? 
        * With this context, order-independence is the only truly correct solution
        * Intuition says favour performance for now and document technicalities around instanced draw order
          * Mesh / Material key types can control ordering at the type level for user control
          * Only affects transparent objects
          * Extra complexity not worth it for correctness within the same material, but incorrectness vs others

